generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}

enum PostVisibility {
  PUBLIC
  FOLLOWERS
  PRIVATE
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum FollowStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum AiCommentStatus {
  IDLE
  PENDING
  READY
  FAILED
}

enum TreatPortion {
  SMALL
  MEDIUM
  FULL
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  AI_COMMENT_READY
  TREAT_BONUS
}

enum CoachNoteOrigin {
  MANUAL
  AI_COMMENT
}

enum ChallengeFrequency {
  DAILY
  WEEKLY
}

enum ChallengeStatus {
  ACTIVE
  COMPLETED
  DROPPED
}

enum ReferralStatus {
  PENDING
  ACCEPTED
  CANCELED
}

enum MembershipPlan {
  FREE
  PREMIUM
}

enum MembershipStatus {
  INACTIVE
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELED
}

enum BillingProvider {
  UNKNOWN
  STRIPE
  PADDLE
}

model User {
  id                String           @id @default(cuid())
  handle            String           @unique @db.VarChar(32)
  name              String           @db.VarChar(120)
  email             String?          @unique
  phone             String?          @unique
  passwordHash      String           @db.VarChar(255)
  avatarUrl         String?
  bio               String?          @db.VarChar(280)
  defaultVisibility PostVisibility   @default(PUBLIC)
  aiCommentDefault  Boolean          @default(true)
  referralCode      String?          @unique @db.VarChar(16)
  membershipPlan    MembershipPlan   @default(FREE)
  membershipStatus  MembershipStatus @default(INACTIVE)
  membershipRenewsAt DateTime?
  membershipTrialEndsAt DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  posts        Post[]
  comments     Comment[]
  measurements Measurement[]
  treatItems   TreatItem[]
  treatSpins   TreatSpin[]
  followers    Follow[]             @relation("Followee")
  following    Follow[]             @relation("Follower")
  postLikes    PostLike[]
  postReports  PostReport[]
  notifications Notification[]
  coachNotesAuthored CoachNote[]    @relation("CoachNotesAuthored")
  coachNotesReceived CoachNote[]    @relation("CoachNotesReceived")
  challengeParticipations ChallengeParticipation[]
  referralsSent      ReferralInvite[] @relation("ReferralsSent")
  referralsReceived  ReferralInvite[] @relation("ReferralsReceived")
  billingCustomer    BillingCustomer?

  @@index([membershipPlan], map: "idx_users_membership_plan")
  @@map("users")
}

model Post {
  id                 String           @id @default(cuid())
  authorId           String
  measurementId      String?          @unique
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  photos             String[]         @default([])
  caption            String?          @db.VarChar(500)
  mealType           MealType?
  weightKg           Decimal?         @db.Decimal(5, 2)
  visibility         PostVisibility   @default(PUBLIC)
  aiCommentStatus    AiCommentStatus  @default(IDLE)
  aiCommentSummary   String?          @db.VarChar(500)
  aiCommentTips      String[]         @default([])
  aiCommentUpdatedAt DateTime?
  aiCommentError     String?          @db.VarChar(255)
  likesCount         Int              @default(0)
  commentsCount      Int              @default(0)
  aiCommentRequested Boolean          @default(false)

  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  measurement Measurement? @relation("PostMeasurement", fields: [measurementId], references: [id], onDelete: SetNull)
  comments    Comment[]
  likes       PostLike[]
  reports     PostReport[]
  coachNotes  CoachNotePostLink[]

  @@index([authorId, createdAt], map: "idx_posts_author_created")
  @@index([visibility, createdAt], map: "idx_posts_visibility_created")
  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  authorId  String
  body      String   @db.VarChar(1000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([postId, createdAt])
  @@map("comments")
}

model Follow {
  followerId String
  followeeId String
  status     FollowStatus @default(ACCEPTED)
  isCloseFriend Boolean    @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  follower User @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followee User @relation("Followee", fields: [followeeId], references: [id], onDelete: Cascade)

  @@id([followerId, followeeId])
  @@unique([followeeId, followerId], map: "idx_follows_unique")
  @@index([followerId, status], map: "idx_follows_follower")
  @@map("follows")
}

model Measurement {
  id        String    @id @default(cuid())
  userId    String
  date      DateTime
  weightKg  Decimal?  @db.Decimal(5, 2)
  waistCm   Decimal?  @db.Decimal(5, 2)
  chestCm   Decimal?  @db.Decimal(5, 2)
  hipCm     Decimal?  @db.Decimal(5, 2)
  armCm     Decimal?  @db.Decimal(5, 2)
  thighCm   Decimal?  @db.Decimal(5, 2)
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post? @relation("PostMeasurement")
  coachNotes CoachNoteMeasurementLink[]

  @@index([userId, date], map: "idx_measurements_user_date")
  @@map("measurements")
}

model PostLike {
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([postId, userId])
  @@index([userId])
  @@map("post_likes")
}

model PostReport {
  id         String   @id @default(cuid())
  postId     String
  reporterId String
  reason     String   @db.VarChar(120)
  details    String?  @db.VarChar(500)
  createdAt  DateTime @default(now())

  post     Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  reporter User @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@index([postId, createdAt])
  @@map("post_reports")
}

model TreatItem {
  id        String         @id @default(cuid())
  userId    String
  name      String         @db.VarChar(120)
  photoUrl  String?
  kcalHint  String?        @db.VarChar(120)
  portions  TreatPortion[] @default([])
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  spins TreatSpin[]

  @@index([userId, createdAt])
  @@map("treat_items")
}

model TreatSpin {
  id                  String       @id @default(cuid())
  userId              String
  treatItemId         String?
  treatNameSnapshot   String       @db.VarChar(120)
  photoUrlSnapshot    String?
  kcalHintSnapshot    String?      @db.VarChar(120)
  spunAt              DateTime     @default(now())
  portion             TreatPortion
  bonusWalkMin        Int
  bonusCompleted      Boolean      @default(false)
  createdAt           DateTime     @default(now())

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  treatItem TreatItem? @relation(fields: [treatItemId], references: [id], onDelete: SetNull)

  @@index([userId, spunAt])
  @@map("treat_spins")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  payload   Json
  readAt    DateTime?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, readAt], map: "idx_notifications_user_read")
  @@map("notifications")
}

model CoachNote {
  id         String           @id @default(cuid())
  coachId    String
  memberId   String
  origin     CoachNoteOrigin  @default(MANUAL)
  title      String?          @db.VarChar(120)
  body       String           @db.VarChar(1000)
  tags       String[]         @default([])
  archivedAt DateTime?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  coach    User                      @relation("CoachNotesAuthored", fields: [coachId], references: [id], onDelete: Cascade)
  member   User                      @relation("CoachNotesReceived", fields: [memberId], references: [id], onDelete: Cascade)
  posts    CoachNotePostLink[]
  measurements CoachNoteMeasurementLink[]

  @@index([memberId, createdAt], map: "idx_coach_notes_member_created")
  @@index([coachId, createdAt], map: "idx_coach_notes_coach_created")
  @@map("coach_notes")
}

model CoachNotePostLink {
  noteId    String
  postId    String
  createdAt DateTime @default(now())

  note CoachNote @relation(fields: [noteId], references: [id], onDelete: Cascade)
  post Post      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([noteId, postId])
  @@index([postId], map: "idx_coach_note_posts_post")
  @@map("coach_note_posts")
}

model CoachNoteMeasurementLink {
  noteId    String
  measurementId String
  createdAt DateTime @default(now())

  note        CoachNote    @relation(fields: [noteId], references: [id], onDelete: Cascade)
  measurement Measurement  @relation(fields: [measurementId], references: [id], onDelete: Cascade)

  @@id([noteId, measurementId])
  @@index([measurementId], map: "idx_coach_note_measurements_measurement")
  @@map("coach_note_measurements")
}

model Challenge {
  id           String              @id @default(cuid())
  slug         String              @unique @db.VarChar(64)
  title        String              @db.VarChar(120)
  summary      String              @db.VarChar(280)
  description  String?             @db.VarChar(500)
  frequency    ChallengeFrequency  @default(WEEKLY)
  targetCount  Int                 @default(3)
  rewardLabel  String?             @db.VarChar(120)
  rewardPoints Int                 @default(0)
  rewardBonusMinutes Int           @default(0)
  startsAt     DateTime?
  endsAt       DateTime?
  isActive     Boolean             @default(true)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  tasks          ChallengeTask[]
  participations ChallengeParticipation[]

  @@index([isActive, frequency], map: "idx_challenges_active_frequency")
  @@index([endsAt], map: "idx_challenges_ends_at")
  @@map("challenges")
}

model ChallengeTask {
  id          String   @id @default(cuid())
  challengeId String
  title       String   @db.VarChar(120)
  instructions String? @db.VarChar(300)
  order       Int      @default(0)
  targetCount Int      @default(1)
  createdAt   DateTime @default(now())

  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  progress  ChallengeProgress[]

  @@index([challengeId, order], map: "idx_challenge_tasks_order")
  @@map("challenge_tasks")
}

model ChallengeParticipation {
  id             String           @id @default(cuid())
  challengeId    String
  userId         String
  status         ChallengeStatus  @default(ACTIVE)
  progressCount  Int              @default(0)
  streakCount    Int              @default(0)
  rewardClaimed  Boolean          @default(false)
  lastProgressAt DateTime?
  joinedAt       DateTime         @default(now())
  completedAt    DateTime?

  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  progress  ChallengeProgress[]

  @@unique([challengeId, userId], map: "idx_participations_unique")
  @@index([userId, status], map: "idx_participations_user_status")
  @@map("challenge_participations")
}

model ChallengeProgress {
  id               String   @id @default(cuid())
  participationId  String
  taskId           String?
  quantity         Int      @default(1)
  notedAt          DateTime @default(now())
  bonusSpinGranted Boolean  @default(false)
  treatBonusMinutes Int     @default(0)

  participation ChallengeParticipation @relation(fields: [participationId], references: [id], onDelete: Cascade)
  task          ChallengeTask?         @relation(fields: [taskId], references: [id], onDelete: SetNull)

  @@index([participationId, notedAt], map: "idx_progress_participation_noted")
  @@map("challenge_progress")
}

model BillingCustomer {
  id                 String           @id @default(cuid())
  userId             String           @unique
  provider           BillingProvider  @default(UNKNOWN)
  providerCustomerId String           @db.VarChar(191)
  subscriptionId     String?          @db.VarChar(191)
  status             MembershipStatus @default(INACTIVE)
  subscribedAt       DateTime?
  canceledAt         DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([provider, providerCustomerId], map: "idx_billing_provider_customer")
  @@map("billing_customers")
}

model ReferralInvite {
  id             String          @id @default(cuid())
  inviterId      String
  inviteeEmail   String          @db.VarChar(320)
  inviteeName    String?         @db.VarChar(120)
  inviteCode     String          @unique @db.VarChar(16)
  status         ReferralStatus  @default(PENDING)
  inviteeUserId  String?
  waitlistOptIn  Boolean         @default(false)
  inviteEmailSentAt DateTime?
  inviteEmailProviderId String?  @db.VarChar(128)
  waitlistProvider  String?      @db.VarChar(64)
  waitlistSubscriberId String?   @db.VarChar(128)
  waitlistSubscribedAt DateTime?
  acceptedAt     DateTime?
  canceledAt     DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  inviter   User @relation("ReferralsSent", fields: [inviterId], references: [id], onDelete: Cascade)
  invitee   User? @relation("ReferralsReceived", fields: [inviteeUserId], references: [id], onDelete: SetNull)

  @@index([inviterId, createdAt], map: "idx_referral_inviter_created")
  @@index([inviteCode], map: "idx_referral_code_lookup")
  @@index([waitlistSubscriberId], map: "idx_referral_waitlist_subscriber")
  @@unique([inviterId, inviteeEmail], map: "idx_referral_unique_email_per_inviter")
  @@map("referral_invites")
}
